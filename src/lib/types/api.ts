/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh token */
        post: operations["refresh_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schemas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List schemas */
        get: operations["list_schemas"];
        put?: never;
        /** Create schema */
        post: operations["create_schema"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schemas/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get schema */
        get: operations["get_schema"];
        put?: never;
        post?: never;
        /** Delete schema */
        delete: operations["delete_schema"];
        options?: never;
        head?: never;
        /** Update schema */
        patch: operations["update_schema"];
        trace?: never;
    };
    "/schemas/{schema_id}/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List fields */
        get: operations["list_fields"];
        put?: never;
        /** Create field */
        post: operations["create_field"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schemas/{schema_name}/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create data */
        post: operations["create_data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateFieldRequest: {
            default_value?: string | null;
            name: string;
            required: boolean;
            value_type: string;
        };
        CreateSchemaRequest: {
            name: string;
        };
        ErrorResponse: {
            message: string;
        };
        Field: {
            default_value?: string | null;
            name: string;
            required: boolean;
            value_type: string;
        };
        LoginRequest: {
            email: string;
            password: string;
        };
        LoginResponse: {
            access: components["schemas"]["Token"];
            refresh: components["schemas"]["Token"];
            user: components["schemas"]["User"];
        };
        Paginated_Field: {
            data: {
                default_value?: string | null;
                name: string;
                required: boolean;
                value_type: string;
            }[];
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
        };
        Paginated_Schema: {
            data: {
                fields: components["schemas"]["Field"][];
                id: string;
                name: string;
            }[];
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
        };
        RefreshTokenRequest: {
            token: string;
            user_id: string;
        };
        Schema: {
            fields: components["schemas"]["Field"][];
            id: string;
            name: string;
        };
        Token: {
            /** Format: date-time */
            expires_at: string;
            token: string;
        };
        UpdateSchemaRequest: {
            /** Format: int64 */
            id?: number | null;
            name?: string | null;
        };
        User: {
            email: string;
            id: string;
            name: string;
            status: components["schemas"]["UserStatus"];
        };
        /** @enum {string} */
        UserStatus: "active" | "inactive" | "pending_verification";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid email or password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    refresh_token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid token or user ID */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_schemas: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated_Schema"];
                };
            };
        };
    };
    create_schema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSchemaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
        };
    };
    get_schema: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
        };
    };
    delete_schema: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
        };
    };
    update_schema: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSchemaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
        };
    };
    list_fields: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schema_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated_Field"];
                };
            };
        };
    };
    create_field: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schema_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFieldRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Field"];
                };
            };
        };
    };
    create_data: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                schema_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
